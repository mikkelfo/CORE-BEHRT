env: local
paths:
  # data_path: 'pretrain_datasets/diagnosis_medication/070623/outputs/data' # inside mounted datastore
  data_path: "..\\outputs\\features_test"
  output_path: outputs/pretraining
  type: med_diag
  run_name: behrt_test
  tokenized_dir: tokenized
  #predefined_splits: outputs/pretraining/behrt_base
  outcome: outcomes/STATIC2020/STATIC2020.pt  

outcome:
  censor_type: STATIC2020
  n_hours: 0
  type: STATIC2020
  
data:
  censorer:
    _target_: data_fixes.censor.EQ_Censorer
  dataset:
    select_ratio: 1.
    masking_ratio: .8
    replace_ratio: .1
    ignore_special_tokens: true
  truncation_len: 20
  num_train_patients: 100
  num_val_patients: 20
  val_ratio: 0.2
  remove_background: true
  min_len: 2

trainer_args:
  batch_size: 32
  effective_batch_size: 64
  epochs: 5
  info: true
  sampler: null
  gradient_clip: 
    clip_value: 1.0
  mixed_precision: false
  shuffle: true
  early_stopping: null # num_epochs or null/false

model:
  # type_vocab_size should be > truncation_len//2 if sep token else >truncation len
  # !!! If you want to feed longer sequences during finetuning adjust type_vocab_size accordingly
  linear: true
  hidden_size: 96
  num_hidden_layers: 3
  num_attention_heads: 3
  intermediate_size: 64
  type_vocab_size: 240 #  if discrete_abspos_embeddings: true, give the range of abspos in months
  behrt_embeddings: true
  discrete_abspos_embeddings: false
  plusplus: true
  abspos_embeddings: false
  prolonged_length_of_stay: 1 # give in days
  pool_type: mean
optimizer:
  lr: 5e-4
  eps: 1e-6

scheduler:
  _target_: transformers.get_linear_schedule_with_warmup
  num_warmup_steps: 100
  num_training_steps: 10000


metrics:
  top1:
    _target_: evaluation.metrics.PrecisionAtK
    topk: 1
  top10:
    _target_: evaluation.metrics.PrecisionAtK
    topk: 10
  plos_loss:
    _target_: evaluation.metrics.LossAccessor
    loss_name: plos_loss
  mlm_loss:
    _target_: evaluation.metrics.LossAccessor
    loss_name: mlm_loss
